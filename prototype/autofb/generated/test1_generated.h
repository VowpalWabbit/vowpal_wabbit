// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST1_VW_PROTO_H_
#define FLATBUFFERS_GENERATED_TEST1_VW_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace VW_proto {

struct test1;
struct test1Builder;
struct test1T;

struct test1T : public flatbuffers::NativeTable {
  typedef test1 TableType;
  float x = 0.0f;
  std::vector<float> y{};
};

struct test1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef test1T NativeTableType;
  typedef test1Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  const flatbuffers::Vector<float> *y() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_Y);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyOffset(verifier, VT_Y) &&
           verifier.VerifyVector(y()) &&
           verifier.EndTable();
  }
  test1T *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(test1T *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<test1> Pack(flatbuffers::FlatBufferBuilder &_fbb, const test1T* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct test1Builder {
  typedef test1 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(test1::VT_X, x, 0.0f);
  }
  void add_y(flatbuffers::Offset<flatbuffers::Vector<float>> y) {
    fbb_.AddOffset(test1::VT_Y, y);
  }
  explicit test1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<test1> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<test1>(end);
    return o;
  }
};

inline flatbuffers::Offset<test1> Createtest1(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<float>> y = 0) {
  test1Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline flatbuffers::Offset<test1> Createtest1Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    const std::vector<float> *y = nullptr) {
  auto y__ = y ? _fbb.CreateVector<float>(*y) : 0;
  return VW_proto::Createtest1(
      _fbb,
      x,
      y__);
}

flatbuffers::Offset<test1> Createtest1(flatbuffers::FlatBufferBuilder &_fbb, const test1T *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline test1T *test1::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<test1T>(new test1T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void test1::UnPackTo(test1T *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); if (_e) { _o->y.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->y[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<test1> test1::Pack(flatbuffers::FlatBufferBuilder &_fbb, const test1T* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createtest1(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<test1> Createtest1(flatbuffers::FlatBufferBuilder &_fbb, const test1T *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const test1T* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y.size() ? _fbb.CreateVector(_o->y) : 0;
  return VW_proto::Createtest1(
      _fbb,
      _x,
      _y);
}

inline const VW_proto::test1 *Gettest1(const void *buf) {
  return flatbuffers::GetRoot<VW_proto::test1>(buf);
}

inline const VW_proto::test1 *GetSizePrefixedtest1(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<VW_proto::test1>(buf);
}

inline bool Verifytest1Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VW_proto::test1>(nullptr);
}

inline bool VerifySizePrefixedtest1Buffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VW_proto::test1>(nullptr);
}

inline const char *test1Extension() {
  return "bfbs";
}

inline void Finishtest1Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<VW_proto::test1> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedtest1Buffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<VW_proto::test1> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<VW_proto::test1T> UnPacktest1(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<VW_proto::test1T>(Gettest1(buf)->UnPack(res));
}

inline std::unique_ptr<VW_proto::test1T> UnPackSizePrefixedtest1(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<VW_proto::test1T>(GetSizePrefixedtest1(buf)->UnPack(res));
}

}  // namespace VW_proto

#endif  // FLATBUFFERS_GENERATED_TEST1_VW_PROTO_H_
