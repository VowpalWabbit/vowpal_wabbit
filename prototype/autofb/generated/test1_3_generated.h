// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST13_VW_PROTO_H_
#define FLATBUFFERS_GENERATED_TEST13_VW_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace VW_proto {

struct test3a;
struct test3aBuilder;
struct test3aT;

struct test1a;
struct test1aBuilder;
struct test1aT;

struct test3aT : public flatbuffers::NativeTable {
  typedef test3a TableType;
  std::vector<std::unique_ptr<VW_proto::test1aT>> t1{};
  std::vector<std::string> t2{};
  test3aT() = default;
  test3aT(const test3aT &o);
  test3aT(test3aT&&) FLATBUFFERS_NOEXCEPT = default;
  test3aT &operator=(test3aT o) FLATBUFFERS_NOEXCEPT;
};

struct test3a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef test3aT NativeTableType;
  typedef test3aBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_T1 = 4,
    VT_T2 = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<VW_proto::test1a>> *t1() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VW_proto::test1a>> *>(VT_T1);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *t2() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_T2);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_T1) &&
           verifier.VerifyVector(t1()) &&
           verifier.VerifyVectorOfTables(t1()) &&
           VerifyOffset(verifier, VT_T2) &&
           verifier.VerifyVector(t2()) &&
           verifier.VerifyVectorOfStrings(t2()) &&
           verifier.EndTable();
  }
  test3aT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(test3aT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<test3a> Pack(flatbuffers::FlatBufferBuilder &_fbb, const test3aT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct test3aBuilder {
  typedef test3a Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_t1(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VW_proto::test1a>>> t1) {
    fbb_.AddOffset(test3a::VT_T1, t1);
  }
  void add_t2(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> t2) {
    fbb_.AddOffset(test3a::VT_T2, t2);
  }
  explicit test3aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<test3a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<test3a>(end);
    return o;
  }
};

inline flatbuffers::Offset<test3a> Createtest3a(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VW_proto::test1a>>> t1 = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> t2 = 0) {
  test3aBuilder builder_(_fbb);
  builder_.add_t2(t2);
  builder_.add_t1(t1);
  return builder_.Finish();
}

inline flatbuffers::Offset<test3a> Createtest3aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<VW_proto::test1a>> *t1 = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *t2 = nullptr) {
  auto t1__ = t1 ? _fbb.CreateVector<flatbuffers::Offset<VW_proto::test1a>>(*t1) : 0;
  auto t2__ = t2 ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*t2) : 0;
  return VW_proto::Createtest3a(
      _fbb,
      t1__,
      t2__);
}

flatbuffers::Offset<test3a> Createtest3a(flatbuffers::FlatBufferBuilder &_fbb, const test3aT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct test1aT : public flatbuffers::NativeTable {
  typedef test1a TableType;
  float x = 0.0f;
  std::vector<float> y{};
};

struct test1a FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef test1aT NativeTableType;
  typedef test1aBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  const flatbuffers::Vector<float> *y() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_Y);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyOffset(verifier, VT_Y) &&
           verifier.VerifyVector(y()) &&
           verifier.EndTable();
  }
  test1aT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(test1aT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<test1a> Pack(flatbuffers::FlatBufferBuilder &_fbb, const test1aT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct test1aBuilder {
  typedef test1a Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(test1a::VT_X, x, 0.0f);
  }
  void add_y(flatbuffers::Offset<flatbuffers::Vector<float>> y) {
    fbb_.AddOffset(test1a::VT_Y, y);
  }
  explicit test1aBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<test1a> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<test1a>(end);
    return o;
  }
};

inline flatbuffers::Offset<test1a> Createtest1a(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<float>> y = 0) {
  test1aBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline flatbuffers::Offset<test1a> Createtest1aDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    const std::vector<float> *y = nullptr) {
  auto y__ = y ? _fbb.CreateVector<float>(*y) : 0;
  return VW_proto::Createtest1a(
      _fbb,
      x,
      y__);
}

flatbuffers::Offset<test1a> Createtest1a(flatbuffers::FlatBufferBuilder &_fbb, const test1aT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline test3aT::test3aT(const test3aT &o)
      : t2(o.t2) {
  t1.reserve(o.t1.size());
  for (const auto &v : o.t1) { t1.emplace_back((v) ? new VW_proto::test1aT(*v) : nullptr); }
}

inline test3aT &test3aT::operator=(test3aT o) FLATBUFFERS_NOEXCEPT {
  std::swap(t1, o.t1);
  std::swap(t2, o.t2);
  return *this;
}

inline test3aT *test3a::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<test3aT>(new test3aT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void test3a::UnPackTo(test3aT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = t1(); if (_e) { _o->t1.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->t1[_i]) { _e->Get(_i)->UnPackTo(_o->t1[_i].get(), _resolver); } else { _o->t1[_i] = std::unique_ptr<VW_proto::test1aT>(_e->Get(_i)->UnPack(_resolver)); }; } } }
  { auto _e = t2(); if (_e) { _o->t2.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->t2[_i] = _e->Get(_i)->str(); } } }
}

inline flatbuffers::Offset<test3a> test3a::Pack(flatbuffers::FlatBufferBuilder &_fbb, const test3aT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createtest3a(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<test3a> Createtest3a(flatbuffers::FlatBufferBuilder &_fbb, const test3aT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const test3aT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _t1 = _o->t1.size() ? _fbb.CreateVector<flatbuffers::Offset<VW_proto::test1a>> (_o->t1.size(), [](size_t i, _VectorArgs *__va) { return Createtest1a(*__va->__fbb, __va->__o->t1[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _t2 = _o->t2.size() ? _fbb.CreateVectorOfStrings(_o->t2) : 0;
  return VW_proto::Createtest3a(
      _fbb,
      _t1,
      _t2);
}

inline test1aT *test1a::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<test1aT>(new test1aT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void test1a::UnPackTo(test1aT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = x(); _o->x = _e; }
  { auto _e = y(); if (_e) { _o->y.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->y[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<test1a> test1a::Pack(flatbuffers::FlatBufferBuilder &_fbb, const test1aT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return Createtest1a(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<test1a> Createtest1a(flatbuffers::FlatBufferBuilder &_fbb, const test1aT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const test1aT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _x = _o->x;
  auto _y = _o->y.size() ? _fbb.CreateVector(_o->y) : 0;
  return VW_proto::Createtest1a(
      _fbb,
      _x,
      _y);
}

inline const VW_proto::test3a *Gettest3a(const void *buf) {
  return flatbuffers::GetRoot<VW_proto::test3a>(buf);
}

inline const VW_proto::test3a *GetSizePrefixedtest3a(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<VW_proto::test3a>(buf);
}

inline bool Verifytest3aBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VW_proto::test3a>(nullptr);
}

inline bool VerifySizePrefixedtest3aBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VW_proto::test3a>(nullptr);
}

inline const char *test3aExtension() {
  return "bfbs";
}

inline void Finishtest3aBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<VW_proto::test3a> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedtest3aBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<VW_proto::test3a> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<VW_proto::test3aT> UnPacktest3a(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<VW_proto::test3aT>(Gettest3a(buf)->UnPack(res));
}

inline std::unique_ptr<VW_proto::test3aT> UnPackSizePrefixedtest3a(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<VW_proto::test3aT>(GetSizePrefixedtest3a(buf)->UnPack(res));
}

}  // namespace VW_proto

#endif  // FLATBUFFERS_GENERATED_TEST13_VW_PROTO_H_
