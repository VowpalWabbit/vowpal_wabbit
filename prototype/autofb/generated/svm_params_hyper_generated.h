// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SVMPARAMSHYPER_AUTOFB_PROTO_H_
#define FLATBUFFERS_GENERATED_SVMPARAMSHYPER_AUTOFB_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace autofb_proto {

struct svm_params_hyperV1;
struct svm_params_hyperV1Builder;

struct svm_params_hyperV1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef svm_params_hyperV1Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KERNEL_TYPE = 4,
    VT_BANDWIDTH = 6,
    VT_DEGREE = 8,
    VT_PARA_ACTIVE = 10,
    VT_ACTIVE_POOL_GREEDY = 12,
    VT_POOL_SIZE = 14,
    VT_SUBSAMPLE = 16,
    VT_REPROCESS = 18
  };
  const flatbuffers::String *kernel_type() const {
    return GetPointer<const flatbuffers::String *>(VT_KERNEL_TYPE);
  }
  float bandwidth() const {
    return GetField<float>(VT_BANDWIDTH, 0.0f);
  }
  int32_t degree() const {
    return GetField<int32_t>(VT_DEGREE, 0);
  }
  bool para_active() const {
    return GetField<uint8_t>(VT_PARA_ACTIVE, 0) != 0;
  }
  bool active_pool_greedy() const {
    return GetField<uint8_t>(VT_ACTIVE_POOL_GREEDY, 0) != 0;
  }
  uint64_t pool_size() const {
    return GetField<uint64_t>(VT_POOL_SIZE, 0);
  }
  uint64_t subsample() const {
    return GetField<uint64_t>(VT_SUBSAMPLE, 0);
  }
  uint64_t reprocess() const {
    return GetField<uint64_t>(VT_REPROCESS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KERNEL_TYPE) &&
           verifier.VerifyString(kernel_type()) &&
           VerifyField<float>(verifier, VT_BANDWIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_DEGREE, 4) &&
           VerifyField<uint8_t>(verifier, VT_PARA_ACTIVE, 1) &&
           VerifyField<uint8_t>(verifier, VT_ACTIVE_POOL_GREEDY, 1) &&
           VerifyField<uint64_t>(verifier, VT_POOL_SIZE, 8) &&
           VerifyField<uint64_t>(verifier, VT_SUBSAMPLE, 8) &&
           VerifyField<uint64_t>(verifier, VT_REPROCESS, 8) &&
           verifier.EndTable();
  }
};

struct svm_params_hyperV1Builder {
  typedef svm_params_hyperV1 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_kernel_type(flatbuffers::Offset<flatbuffers::String> kernel_type) {
    fbb_.AddOffset(svm_params_hyperV1::VT_KERNEL_TYPE, kernel_type);
  }
  void add_bandwidth(float bandwidth) {
    fbb_.AddElement<float>(svm_params_hyperV1::VT_BANDWIDTH, bandwidth, 0.0f);
  }
  void add_degree(int32_t degree) {
    fbb_.AddElement<int32_t>(svm_params_hyperV1::VT_DEGREE, degree, 0);
  }
  void add_para_active(bool para_active) {
    fbb_.AddElement<uint8_t>(svm_params_hyperV1::VT_PARA_ACTIVE, static_cast<uint8_t>(para_active), 0);
  }
  void add_active_pool_greedy(bool active_pool_greedy) {
    fbb_.AddElement<uint8_t>(svm_params_hyperV1::VT_ACTIVE_POOL_GREEDY, static_cast<uint8_t>(active_pool_greedy), 0);
  }
  void add_pool_size(uint64_t pool_size) {
    fbb_.AddElement<uint64_t>(svm_params_hyperV1::VT_POOL_SIZE, pool_size, 0);
  }
  void add_subsample(uint64_t subsample) {
    fbb_.AddElement<uint64_t>(svm_params_hyperV1::VT_SUBSAMPLE, subsample, 0);
  }
  void add_reprocess(uint64_t reprocess) {
    fbb_.AddElement<uint64_t>(svm_params_hyperV1::VT_REPROCESS, reprocess, 0);
  }
  explicit svm_params_hyperV1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<svm_params_hyperV1> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<svm_params_hyperV1>(end);
    return o;
  }
};

inline flatbuffers::Offset<svm_params_hyperV1> Createsvm_params_hyperV1(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> kernel_type = 0,
    float bandwidth = 0.0f,
    int32_t degree = 0,
    bool para_active = false,
    bool active_pool_greedy = false,
    uint64_t pool_size = 0,
    uint64_t subsample = 0,
    uint64_t reprocess = 0) {
  svm_params_hyperV1Builder builder_(_fbb);
  builder_.add_reprocess(reprocess);
  builder_.add_subsample(subsample);
  builder_.add_pool_size(pool_size);
  builder_.add_degree(degree);
  builder_.add_bandwidth(bandwidth);
  builder_.add_kernel_type(kernel_type);
  builder_.add_active_pool_greedy(active_pool_greedy);
  builder_.add_para_active(para_active);
  return builder_.Finish();
}

inline flatbuffers::Offset<svm_params_hyperV1> Createsvm_params_hyperV1Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *kernel_type = nullptr,
    float bandwidth = 0.0f,
    int32_t degree = 0,
    bool para_active = false,
    bool active_pool_greedy = false,
    uint64_t pool_size = 0,
    uint64_t subsample = 0,
    uint64_t reprocess = 0) {
  auto kernel_type__ = kernel_type ? _fbb.CreateString(kernel_type) : 0;
  return autofb_proto::Createsvm_params_hyperV1(
      _fbb,
      kernel_type__,
      bandwidth,
      degree,
      para_active,
      active_pool_greedy,
      pool_size,
      subsample,
      reprocess);
}

}  // namespace autofb_proto

#endif  // FLATBUFFERS_GENERATED_SVMPARAMSHYPER_AUTOFB_PROTO_H_
