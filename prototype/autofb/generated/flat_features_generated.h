// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATFEATURES_VW_PROTO_H_
#define FLATBUFFERS_GENERATED_FLATFEATURES_VW_PROTO_H_

#include "flatbuffers/flatbuffers.h"

namespace VW_proto {

struct flat_features;
struct flat_featuresBuilder;

struct flat_features FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef flat_featuresBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDICIES = 4,
    VT_VALUES = 6
  };
  const flatbuffers::Vector<uint64_t> *indicies() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_INDICIES);
  }
  const flatbuffers::Vector<float> *values() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INDICIES) &&
           verifier.VerifyVector(indicies()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};

struct flat_featuresBuilder {
  typedef flat_features Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_indicies(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> indicies) {
    fbb_.AddOffset(flat_features::VT_INDICIES, indicies);
  }
  void add_values(flatbuffers::Offset<flatbuffers::Vector<float>> values) {
    fbb_.AddOffset(flat_features::VT_VALUES, values);
  }
  explicit flat_featuresBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<flat_features> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<flat_features>(end);
    return o;
  }
};

inline flatbuffers::Offset<flat_features> Createflat_features(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> indicies = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> values = 0) {
  flat_featuresBuilder builder_(_fbb);
  builder_.add_values(values);
  builder_.add_indicies(indicies);
  return builder_.Finish();
}

inline flatbuffers::Offset<flat_features> Createflat_featuresDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *indicies = nullptr,
    const std::vector<float> *values = nullptr) {
  auto indicies__ = indicies ? _fbb.CreateVector<uint64_t>(*indicies) : 0;
  auto values__ = values ? _fbb.CreateVector<float>(*values) : 0;
  return VW_proto::Createflat_features(
      _fbb,
      indicies__,
      values__);
}

}  // namespace VW_proto

#endif  // FLATBUFFERS_GENERATED_FLATFEATURES_VW_PROTO_H_
