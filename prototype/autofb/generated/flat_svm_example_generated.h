// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATSVMEXAMPLE_VW_PROTO_H_
#define FLATBUFFERS_GENERATED_FLATSVMEXAMPLE_VW_PROTO_H_

#include "flatbuffers/flatbuffers.h"

#include "flat_features_generated.h"

namespace VW_proto {

struct flat_svm_example;
struct flat_svm_exampleBuilder;

struct flat_svm_example FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef flat_svm_exampleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOTAL_SUM_FEAT_SQ = 4,
    VT_NUM_FEATURES = 6,
    VT_GLOBAL_WEIGHT = 8,
    VT_FT_OFFSET = 10,
    VT_EXAMPLE_COUNTER = 12,
    VT_TAG = 14,
    VT_SIMPLE_LABEL = 16,
    VT_FS = 18
  };
  float total_sum_feat_sq() const {
    return GetField<float>(VT_TOTAL_SUM_FEAT_SQ, 0.0f);
  }
  uint64_t num_features() const {
    return GetField<uint64_t>(VT_NUM_FEATURES, 0);
  }
  float global_weight() const {
    return GetField<float>(VT_GLOBAL_WEIGHT, 0.0f);
  }
  uint64_t ft_offset() const {
    return GetField<uint64_t>(VT_FT_OFFSET, 0);
  }
  uint64_t example_counter() const {
    return GetField<uint64_t>(VT_EXAMPLE_COUNTER, 0);
  }
  const flatbuffers::String *tag() const {
    return GetPointer<const flatbuffers::String *>(VT_TAG);
  }
  float simple_label() const {
    return GetField<float>(VT_SIMPLE_LABEL, 0.0f);
  }
  const VW_proto::flat_features *fs() const {
    return GetPointer<const VW_proto::flat_features *>(VT_FS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_TOTAL_SUM_FEAT_SQ, 4) &&
           VerifyField<uint64_t>(verifier, VT_NUM_FEATURES, 8) &&
           VerifyField<float>(verifier, VT_GLOBAL_WEIGHT, 4) &&
           VerifyField<uint64_t>(verifier, VT_FT_OFFSET, 8) &&
           VerifyField<uint64_t>(verifier, VT_EXAMPLE_COUNTER, 8) &&
           VerifyOffset(verifier, VT_TAG) &&
           verifier.VerifyString(tag()) &&
           VerifyField<float>(verifier, VT_SIMPLE_LABEL, 4) &&
           VerifyOffset(verifier, VT_FS) &&
           verifier.VerifyTable(fs()) &&
           verifier.EndTable();
  }
};

struct flat_svm_exampleBuilder {
  typedef flat_svm_example Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_total_sum_feat_sq(float total_sum_feat_sq) {
    fbb_.AddElement<float>(flat_svm_example::VT_TOTAL_SUM_FEAT_SQ, total_sum_feat_sq, 0.0f);
  }
  void add_num_features(uint64_t num_features) {
    fbb_.AddElement<uint64_t>(flat_svm_example::VT_NUM_FEATURES, num_features, 0);
  }
  void add_global_weight(float global_weight) {
    fbb_.AddElement<float>(flat_svm_example::VT_GLOBAL_WEIGHT, global_weight, 0.0f);
  }
  void add_ft_offset(uint64_t ft_offset) {
    fbb_.AddElement<uint64_t>(flat_svm_example::VT_FT_OFFSET, ft_offset, 0);
  }
  void add_example_counter(uint64_t example_counter) {
    fbb_.AddElement<uint64_t>(flat_svm_example::VT_EXAMPLE_COUNTER, example_counter, 0);
  }
  void add_tag(flatbuffers::Offset<flatbuffers::String> tag) {
    fbb_.AddOffset(flat_svm_example::VT_TAG, tag);
  }
  void add_simple_label(float simple_label) {
    fbb_.AddElement<float>(flat_svm_example::VT_SIMPLE_LABEL, simple_label, 0.0f);
  }
  void add_fs(flatbuffers::Offset<VW_proto::flat_features> fs) {
    fbb_.AddOffset(flat_svm_example::VT_FS, fs);
  }
  explicit flat_svm_exampleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<flat_svm_example> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<flat_svm_example>(end);
    return o;
  }
};

inline flatbuffers::Offset<flat_svm_example> Createflat_svm_example(
    flatbuffers::FlatBufferBuilder &_fbb,
    float total_sum_feat_sq = 0.0f,
    uint64_t num_features = 0,
    float global_weight = 0.0f,
    uint64_t ft_offset = 0,
    uint64_t example_counter = 0,
    flatbuffers::Offset<flatbuffers::String> tag = 0,
    float simple_label = 0.0f,
    flatbuffers::Offset<VW_proto::flat_features> fs = 0) {
  flat_svm_exampleBuilder builder_(_fbb);
  builder_.add_example_counter(example_counter);
  builder_.add_ft_offset(ft_offset);
  builder_.add_num_features(num_features);
  builder_.add_fs(fs);
  builder_.add_simple_label(simple_label);
  builder_.add_tag(tag);
  builder_.add_global_weight(global_weight);
  builder_.add_total_sum_feat_sq(total_sum_feat_sq);
  return builder_.Finish();
}

inline flatbuffers::Offset<flat_svm_example> Createflat_svm_exampleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    float total_sum_feat_sq = 0.0f,
    uint64_t num_features = 0,
    float global_weight = 0.0f,
    uint64_t ft_offset = 0,
    uint64_t example_counter = 0,
    const char *tag = nullptr,
    float simple_label = 0.0f,
    flatbuffers::Offset<VW_proto::flat_features> fs = 0) {
  auto tag__ = tag ? _fbb.CreateString(tag) : 0;
  return VW_proto::Createflat_svm_example(
      _fbb,
      total_sum_feat_sq,
      num_features,
      global_weight,
      ft_offset,
      example_counter,
      tag__,
      simple_label,
      fs);
}

}  // namespace VW_proto

#endif  // FLATBUFFERS_GENERATED_FLATSVMEXAMPLE_VW_PROTO_H_
