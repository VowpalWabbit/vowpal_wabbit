Diagnostic Options:
    --version                               Version information (type: bool)
    -a, --audit                             Print weights of features (type: bool)
    -P, --progress arg                      Progress update frequency. int: additive, float: multiplicative
                                            (type: str)
    --dry_run                               Parse arguments and print corresponding metadata. Will not execute
                                            driver (type: bool)
    -h, --help                              More information on vowpal wabbit can be found here https://vowpalwabbit.org
                                            (type: bool)
Driver Options:
    --onethread                             Disable parse thread (type: bool)
Example Options:
    -t, --testonly                          Ignore label information and just test (type: bool)
    --holdout_off                           No holdout data in multiple passes (type: bool)
    --holdout_period arg                    Holdout period for test only (type: uint, default: 10)
    --holdout_after arg                     Holdout after n training examples, default off (disables holdout_period)
                                            (type: uint)
    --early_terminate arg                   Specify the number of passes tolerated when holdout loss doesn't
                                            decrease before early termination (type: uint, default: 3)
    --passes arg                            Number of Training Passes (type: uint, default: 1)
    --initial_pass_length arg               Initial number of examples per pass. -1 for no limit (type: int,
                                            default: -1)
    --examples arg                          Number of examples to parse. -1 for no limit (type: int, default:
                                            -1)
    --min_prediction arg                    Smallest prediction to output (type: float)
    --max_prediction arg                    Largest prediction to output (type: float)
    --sort_features                         Turn this on to disregard order in which features have been defined.
                                            This will lead to smaller cache sizes (type: bool)
    --loss_function arg                     Specify the loss function to be used, uses squared by default
                                            (type: str, default: squared, choices {classic, expectile, hinge,
                                            logistic, poisson, quantile, squared})
    --quantile_tau arg                      Parameter \tau associated with Quantile loss. Defaults to 0.5
                                            (type: float, default: 0.5)
    --expectile_q arg                       Parameter q associated with Expectile loss (required). Must be
                                            a value in (0.0, 0.5]. (type: float)
    --logistic_min arg                      Minimum loss value for logistic loss. Defaults to -1 (type: float,
                                            default: -1)
    --logistic_max arg                      Maximum loss value for logistic loss. Defaults to +1 (type: float,
                                            default: 1)
    --l1 arg                                L_1 lambda (type: float, default: 0)
    --l2 arg                                L_2 lambda (type: float, default: 0)
    --no_bias_regularization                No bias in regularization (type: bool)
    --named_labels arg                      Use names for labels (multiclass, etc.) rather than integers,
                                            argument specified all possible labels, comma-sep, eg "--named_labels
                                            Noun,Verb,Adj,Punc" (type: str, keep)
Feature Options:
    --hash arg                              How to hash the features (type: str, default: strings, choices
                                            {all, strings}, keep)
    --hash_seed arg                         Seed for hash function (type: uint, default: 0, keep)
    --ignore args...                        Ignore namespaces beginning with character <arg> (type: list[str],
                                            keep)
    --ignore_linear args...                 Ignore namespaces beginning with character <arg> for linear terms
                                            only (type: list[str], keep)
    --ignore_features_dsjson_experimental args...
                                            Ignore specified features from namespace. To ignore a feature
                                            arg should be namespace|feature To ignore a feature in the default
                                            namespace, arg should be |feature (type: list[str], keep, experimental)
    --keep args...                          Keep namespaces beginning with character <arg> (type: list[str],
                                            keep)
    --redefine args...                      Redefine namespaces beginning with characters of std::string
                                            S as namespace N. <arg> shall be in form 'N:=S' where := is operator.
                                            Empty N or S are treated as default namespace. Use ':' as a wildcard
                                            in S. (type: list[str], keep)
    -b, --bit_precision arg                 Number of bits in the feature table (type: uint)
    --noconstant                            Don't add a constant feature (type: bool, keep)
    -C, --constant arg                      Set initial value of constant (type: float, default: 0)
    --ngram args...                         Generate N grams. To generate N grams for a single namespace
                                            'foo', arg should be fN (type: list[str])
    --skips args...                         Generate skips in N grams. This in conjunction with the ngram
                                            tag can be used to generate generalized n-skip-k-gram. To generate
                                            n-skips for a single namespace 'foo', arg should be fN. (type:
                                            list[str])
    --feature_limit args...                 Limit to N unique features per namespace. To apply to a single
                                            namespace 'foo', arg should be fN (type: list[str])
    --affix arg                             Generate prefixes/suffixes of features; argument '+2a,-3b,+1'
                                            means generate 2-char prefixes for namespace a, 3-char suffixes
                                            for b and 1 char prefixes for default namespace (type: str, keep)
    --spelling args...                      Compute spelling features for a give namespace (use '_' for default
                                            namespace) (type: list[str], keep)
    --dictionary args...                    Read a dictionary for additional features (arg either 'x:file'
                                            or just 'file') (type: list[str], keep)
    --dictionary_path args...               Look in this directory for dictionaries; defaults to current
                                            directory or env{PATH} (type: list[str])
    --interactions args...                  Create feature interactions of any level between namespaces (type:
                                            list[str], keep)
    --experimental_full_name_interactions args...
                                            Create feature interactions of any level between namespaces by
                                            specifying the full name of each namespace. (type: list[str],
                                            keep, experimental)
    --permutations                          Use permutations instead of combinations for feature interactions
                                            of same namespace (type: bool)
    --leave_duplicate_interactions          Don't remove interactions with duplicate combinations of namespaces.
                                            For ex. this is a duplicate: '-q ab -q ba' and a lot more in
                                            '-q ::'. (type: bool)
    -q, --quadratic args...                 Create and use quadratic features (type: list[str], keep)
    --cubic args...                         Create and use cubic features (type: list[str], keep)
Input Options:
    -d, --data arg                          Example set (type: str)
    --daemon                                Persistent daemon mode on port 26542 (type: bool)
    --foreground                            In persistent daemon mode, do not run in the background (type:
                                            bool)
    --port arg                              Port to listen on; use 0 to pick unused port (type: uint)
    --num_children arg                      Number of children for persistent daemon mode (type: uint)
    --pid_file arg                          Write pid file in persistent daemon mode (type: str)
    --port_file arg                         Write port used in persistent daemon mode (type: str)
    -c, --cache                             Use a cache. The default is <data>.cache (type: bool)
    --cache_file args...                    The location(s) of cache_file (type: list[str])
    --json                                  Enable JSON parsing (type: bool)
    --dsjson                                Enable Decision Service JSON parsing (type: bool)
    -k, --kill_cache                        Do not reuse existing cache: create a new one always (type: bool)
    --compressed                            use gzip format whenever possible. If a cache file is being created,
                                            this option creates a compressed cache file. A mixture of raw-text
                                            & compressed inputs are supported with autodetection. (type:
                                            bool)
    --no_stdin                              Do not default to reading from stdin (type: bool)
    --no_daemon                             Force a loaded daemon or active learning model to accept local
                                            input instead of starting in daemon mode (type: bool)
    --chain_hash                            Enable chain hash in JSON for feature name and string feature
                                            value. e.g. {'A': {'B': 'C'}} is hashed as A^B^C. (type: bool,
                                            keep)
    --flatbuffer                            Data file will be interpreted as a flatbuffer file (type: bool,
                                            experimental)
    --csv                                   Data file will be interpreted as a CSV file (type: bool, experimental)
    --csv_separator arg                     CSV Parser: Specify field separator in one character, " | : are
                                            not allowed for reservation. (type: str, default: ,, experimental)
    --csv_no_file_header                    CSV Parser: First line is NOT a header. By default, CSV files
                                            are assumed to have a header with feature and/or namespaces names.
                                            You MUST specify the header with --csv_header if you use this
                                            option. (type: bool, default: false, experimental)
    --csv_header arg                        CSV Parser: Override the CSV header by providing (namespace,
                                            '|' and) feature name separated with ','. By default, CSV files
                                            are assumed to have a header with feature and/or namespaces names
                                            in the CSV first line. You can override it by specifying here.
                                            Combined with --csv_no_file_header, we assume that there is no
                                            header in the CSV file. (type: str, experimental)
    --csv_ns_value arg                      CSV Parser: Scale the namespace values by specifying the float
                                            ratio. e.g. --csv_ns_value=a:0.5,b:0.3,:8 (type: str, experimental)
Logging Options:
    --quiet                                 Don't output diagnostics and progress updates. Supplying this
                                            implies --log_level off and --driver_output_off. Supplying this
                                            overrides an explicit log_level argument. (type: bool)
    --driver_output_off                     Disable output for the driver (type: bool)
    --driver_output arg                     Specify the stream to output driver output to (type: str, default:
                                            stderr, choices {stderr, stdout})
    --log_level arg                         Log level for logging messages. Specifying this wil override
                                            --quiet for log output (type: str, default: info, choices {critical,
                                            error, info, off, warn})
    --log_output arg                        Specify the stream to output log messages to. In the past VW's
                                            choice of stream for logging messages wasn't consistent. Supplying
                                            compat will maintain that old behavior. Compat is now deprecated
                                            so it is recommended that stdout or stderr is chosen. (type:
                                            str, default: stdout, choices {compat, stderr, stdout})
    --limit_output arg                      Avoid chatty output. Limit total printed lines. 0 means unbounded
                                            (type: uint, default: 0)
Output Model Options:
    -f, --final_regressor arg               Final regressor (type: str)
    --readable_model arg                    Output human-readable final regressor with numeric features (type:
                                            str)
    --invert_hash arg                       Output human-readable final regressor with feature names. Computationally
                                            expensive (type: str)
    --hexfloat_weights                      Output hexfloat format for floats for human-readable final regressor.
                                            Useful for debugging/comparing. (type: bool)
    --dump_json_weights_experimental arg    Output json representation of model parameters. (type: str, experimental)
    --dump_json_weights_include_feature_names_experimental
                                            Whether to include feature names in json output (type: bool,
                                            experimental)
    --dump_json_weights_include_extra_online_state_experimental
                                            Whether to include extra online state in json output (type: bool,
                                            experimental)
    --predict_only_model                    Do not save extra state for learning to be resumed. Stored model
                                            can only be used for prediction (type: bool)
    --save_resume                           This flag is now deprecated and models can continue learning
                                            by default (type: bool)
    --preserve_performance_counters         Prevent the default behavior of resetting counters when loading
                                            a model. Has no effect when writing a model. (type: bool)
    --save_per_pass                         Save the model after every pass over data (type: bool)
    --output_feature_regularizer_binary arg Per feature regularization output file (type: str)
    --output_feature_regularizer_text arg   Per feature regularization output file, in text (type: str)
    --id arg                                User supplied ID embedded into the final regressor (type: str)
Parallelization Options:
    --span_server arg                       Location of server for setting up spanning tree (type: str)
    --unique_id arg                         Unique id used for cluster parallel jobs (type: uint, default:
                                            0)
    --total arg                             Total number of nodes used in cluster parallel job (type: uint,
                                            default: 1)
    --node arg                              Node number in cluster parallel job (type: uint, default: 0)
    --span_server_port arg                  Port of the server for setting up spanning tree (type: int, default:
                                            26543)
Parser Options:
    --ring_size arg                         Size of example ring (type: int, default: 256)
    --example_queue_limit arg               Max number of examples to store after parsing but before the
                                            learner has processed. Rarely needs to be changed. (type: int,
                                            default: 256)
    --strict_parse                          Throw on malformed examples (type: bool)
Prediction Output Options:
    -p, --predictions arg                   File to output predictions to (type: str)
    -r, --raw_predictions arg               File to output unnormalized predictions to (type: str)
Randomization Options:
    --random_seed arg                       Seed random number generator (type: uint, default: 0)
Update Options:
    -l, --learning_rate arg                 Set learning rate (type: float, default: 0.5, keep)
    --power_t arg                           T power value (type: float, default: 0.5, keep)
    --decay_learning_rate arg               Set Decay factor for learning_rate between passes (type: float,
                                            default: 1)
    --initial_t arg                         Initial t value (type: float)
    --feature_mask arg                      Use existing regressor to determine which parameters may be updated.
                                            If no initial_regressor given, also used for initial weights.
                                            (type: str)
Weight Options:
    -i, --initial_regressor args...         Initial regressor(s) (type: list[str])
    --initial_weight arg                    Set all weights to an initial value of arg (type: float, default:
                                            0)
    --random_weights                        Make initial weights random (type: bool)
    --normal_weights                        Make initial weights normal (type: bool)
    --truncated_normal_weights              Make initial weights truncated normal (type: bool)
    --sparse_weights                        Use a sparse datastructure for weights (type: bool)
    --input_feature_regularizer arg         Per feature regularization input file (type: str)
[Reduction]  Importance Weight Classes Options:
    --classweight args...                   Importance weight multiplier for class (type: list[str], necessary)
[Reduction] Active Learning Options:
    --active                                Enable active learning (type: bool, keep, necessary)
    --simulation                            Active learning simulation mode (type: bool)
    --mellowness arg                        Active learning mellowness parameter c_0. Default 8 (type: float,
                                            default: 8, keep)
[Reduction] Active Learning with Cover Options:
    --active_cover                          Enable active learning with cover (type: bool, keep, necessary)
    --mellowness arg                        Active learning mellowness parameter c_0 (type: float, default:
                                            8, keep)
    --alpha arg                             Active learning variance upper bound parameter alpha (type: float,
                                            default: 1)
    --beta_scale arg                        Active learning variance upper bound parameter beta_scale (type:
                                            float, default: 3.1622777)
    --cover arg                             Cover size (type: uint, default: 12, keep)
    --oracular                              Use Oracular-CAL style query or not (type: bool)
[Reduction] Audit Regressor Options:
    --audit_regressor arg                   Stores feature names and their regressor values. Same dataset
                                            must be used for both regressor training and this mode. (type:
                                            str, keep, necessary)
[Reduction] Autolink Options:
    --autolink arg                          Create link function with polynomial d (type: uint, keep, necessary)
[Reduction] Automl Options:
    --automl arg                            Set number of live configs (type: uint, default: 4, keep, necessary,
                                            experimental)
    --global_lease arg                      Set initial lease for automl interactions (type: uint, default:
                                            4000, keep, experimental)
    --cm_type arg                           Set type of config manager (type: str, default: interaction,
                                            choices {interaction}, keep, experimental)
    --priority_type arg                     Set function to determine next config (type: str, default: none,
                                            choices {favor_popular_namespaces, none}, keep, experimental)
    --priority_challengers arg              Set number of priority challengers to use (type: int, default:
                                            -1, keep, experimental)
    --verbose_metrics                       Extended metrics for debugging (type: bool, experimental)
    --interaction_type arg                  Set what type of interactions to use (type: str, default: quadratic,
                                            choices {cubic, quadratic}, keep, experimental)
    --oracle_type arg                       Set oracle to generate configs (type: str, default: one_diff,
                                            choices {champdupe, one_diff, one_diff_inclusion, rand}, keep,
                                            experimental)
    --debug_reversed_learn                  Debug: learn each config in reversed order (last to first). (type:
                                            bool, default: false, experimental)
    --aml_predict_only_model arg            transform input automl model into predict only automl model (type:
                                            str, experimental)
    --automl_significance_level arg         Set significance level for champion change (type: float, default:
                                            0.05, keep, experimental)
    --fixed_significance_level              Use fixed significance level as opposed to scaling by model count
                                            (bonferroni correction) (type: bool, keep, experimental)
[Reduction] Baseline Options:
    --baseline                              Learn an additive baseline (from constant features) and a residual
                                            separately in regression (type: bool, keep, necessary)
    --lr_multiplier arg                     Learning rate multiplier for baseline model (type: float, default:
                                            1)
    --global_only                           Use separate example with only global constant for baseline predictions
                                            (type: bool, keep)
    --check_enabled                         Only use baseline when the example contains enabled flag (type:
                                            bool, keep)
[Reduction] Baseline challenger Options:
    --baseline_challenger_cb                Build a CI around the baseline action and use it instead of the
                                            model if it's perfoming better (type: bool, keep, necessary,
                                            experimental)
    --cb_c_alpha arg                        Confidence level for baseline (type: float, default: 0.05, keep,
                                            experimental)
    --cb_c_tau arg                          Time constant for count decay (type: float, default: 0.999, keep,
                                            experimental)
[Reduction] Binary Loss Options:
    --binary                                Report loss as binary classification on -1,1 (type: bool, keep,
                                            necessary)
[Reduction] Boosting Options:
    --boosting arg                          Online boosting with <N> weak learners (type: int, keep, necessary)
    --gamma arg                             Weak learner's edge (=0.1), used only by online BBM (type: float,
                                            default: 0.1)
    --alg arg                               Specify the boosting algorithm: BBM (default), logistic (AdaBoost.OL.W),
                                            adaptive (AdaBoost.OL) (type: str, default: BBM, choices {BBM,
                                            adaptive, logistic}, keep)
[Reduction] Bootstrap Options:
    --bootstrap arg                         K-way bootstrap by online importance resampling (type: uint,
                                            keep, necessary)
    --bs_type arg                           Prediction type (type: str, default: mean, choices {mean, vote},
                                            keep)
[Reduction] CATS Tree Options:
    --cats_tree arg                         CATS Tree with <k> labels (type: uint, keep, necessary)
    --tree_bandwidth arg                    Tree bandwidth for continuous actions in terms of #actions (type:
                                            uint, default: 0, keep)
    --link arg                              The learner in each node must return a prediction in range [-1,1],
                                            so only glf1 is allowed (type: str, choices {glf1}, keep)
[Reduction] CB Distributionally Robust Optimization Options:
    --cb_dro                                Use DRO for cb learning (type: bool, keep, necessary)
    --cb_dro_alpha arg                      Confidence level for cb dro (type: float, default: 0.05, keep)
    --cb_dro_tau arg                        Time constant for count decay for cb dro (type: float, default:
                                            0.999, keep)
    --cb_dro_wmax arg                       Maximum importance weight for cb_dro (type: float, default: inf,
                                            keep)
[Reduction] CB Sample Options:
    --cb_sample                             Sample from CB pdf and swap top action (type: bool, keep, necessary)
[Reduction] CBify Options:
    --cbify arg                             Convert multiclass on <k> classes into a contextual bandit problem
                                            (type: uint, keep, necessary)
    --cbify_cs                              Consume cost-sensitive classification examples instead of multiclass
                                            (type: bool)
    --cbify_reg                             Consume regression examples instead of multiclass and cost sensitive
                                            (type: bool)
    --cats arg                              Continuous action tree with smoothing (type: uint, default: 0,
                                            keep)
    --cb_discrete                           Discretizes continuous space and adds cb_explore as option (type:
                                            bool, keep)
    --min_value arg                         Minimum continuous value (type: float, keep)
    --max_value arg                         Maximum continuous value (type: float, keep)
    --loss_option arg                       Loss options for regression - 0:squared, 1:absolute, 2:0/1 (type:
                                            int, default: 0, choices {0, 1, 2})
    --loss_report arg                       Loss report option - 0:normalized, 1:denormalized (type: int,
                                            default: 0, choices {0, 1})
    --loss_01_ratio arg                     Ratio of zero loss for 0/1 loss (type: float, default: 0.1)
    --loss0 arg                             Loss for correct label (type: float, default: 0)
    --loss1 arg                             Loss for incorrect label (type: float, default: 1)
    --flip_loss_sign                        Flip sign of loss (use reward instead of loss) (type: bool, keep)
[Reduction] Conditional Contextual Bandit Exploration with ADF Options:
    --ccb_explore_adf                       Do Conditional Contextual Bandit learning with multiline action
                                            dependent features (type: bool, keep, necessary)
    --all_slots_loss                        Report average loss from all slots (type: bool)
    --no_predict                            Do not do a prediction when training (type: bool)
    --cb_type arg                           Contextual bandit method to use (type: str, default: mtr, choices
                                            {dm, dr, ips, mtr, sm}, keep)
[Reduction] Confidence Options:
    --confidence                            Get confidence for binary predictions (type: bool, keep, necessary)
    --confidence_after_training             Confidence after training (type: bool)
[Reduction] Conjugate Gradient Options:
    --conjugate_gradient                    Use conjugate gradient based optimization (type: bool, keep,
                                            necessary)
[Reduction] Contextual Bandit Exploration Options:
    --cb_explore arg                        Online explore-exploit for a <k> action contextual bandit problem
                                            (type: uint, keep, necessary)
    --first arg                             Tau-first exploration (type: uint, keep)
    --epsilon arg                           Epsilon-greedy exploration (type: float, default: 0.05, keep)
    --bag arg                               Bagging-based exploration (type: uint, keep)
    --cover arg                             Online cover based exploration (type: uint, keep)
    --nounif                                Do not explore uniformly on zero-probability actions in cover
                                            (type: bool, keep)
    --psi arg                               Disagreement parameter for cover (type: float, default: 1, keep)
[Reduction] Contextual Bandit Exploration with ADF (RegCB) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --regcb                                 RegCB-elim exploration (type: bool, keep, necessary)
    --regcbopt                              RegCB optimistic exploration (type: bool, keep)
    --mellowness arg                        RegCB mellowness parameter c_0. Default 0.1 (type: float, default:
                                            0.1, keep)
    --cb_min_cost arg                       Lower bound on cost (type: float, default: 0, keep)
    --cb_max_cost arg                       Upper bound on cost (type: float, default: 1, keep)
    --first_only                            Only explore the first action in a tie-breaking event (type:
                                            bool, keep)
    --cb_type arg                           Contextual bandit method to use. RegCB only supports supervised
                                            regression (mtr) (type: str, default: mtr, choices {mtr}, keep)
[Reduction] Contextual Bandit Exploration with ADF (SquareCB) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --squarecb                              SquareCB exploration (type: bool, keep, necessary)
    --gamma_scale arg                       Sets SquareCB greediness parameter to gamma=[gamma_scale]*[num
                                            examples]^1/2 (type: float, default: 10, keep)
    --gamma_exponent arg                    Exponent on [num examples] in SquareCB greediness parameter gamma
                                            (type: float, default: 0.5, keep)
    --elim                                  Only perform SquareCB exploration over plausible actions (computed
                                            via RegCB strategy) (type: bool, keep)
    --mellowness arg                        Mellowness parameter c_0 for computing plausible action set.
                                            Only used with --elim (type: float, default: 0.001, keep)
    --cb_min_cost arg                       Lower bound on cost. Only used with --elim (type: float, default:
                                            0, keep)
    --cb_max_cost arg                       Upper bound on cost. Only used with --elim (type: float, default:
                                            1, keep)
    --cb_type arg                           Contextual bandit method to use. SquareCB only supports supervised
                                            regression (mtr) (type: str, default: mtr, choices {mtr}, keep)
[Reduction] Contextual Bandit Exploration with ADF (bagging) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --epsilon arg                           Epsilon-greedy exploration (type: float, default: 0, keep)
    --bag arg                               Bagging-based exploration (type: uint, keep, necessary)
    --greedify                              Always update first policy once in bagging (type: bool, keep)
    --first_only                            Only explore the first action in a tie-breaking event (type:
                                            bool, keep)
[Reduction] Contextual Bandit Exploration with ADF (greedy) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --epsilon arg                           Epsilon-greedy exploration (type: float, default: 0.05, keep)
    --first_only                            Only explore the first action in a tie-breaking event (type:
                                            bool, keep)
[Reduction] Contextual Bandit Exploration with ADF (online cover) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --cover arg                             Online cover based exploration (type: uint, keep, necessary)
    --psi arg                               Disagreement parameter for cover (type: float, default: 1, keep)
    --nounif                                Do not explore uniformly on zero-probability actions in cover
                                            (type: bool, keep)
    --first_only                            Only explore the first action in a tie-breaking event (type:
                                            bool, keep)
    --cb_type arg                           Contextual bandit method to use (type: str, default: mtr, choices
                                            {dr, ips, mtr}, keep)
    --epsilon arg                           Epsilon-greedy exploration (type: float, default: 0.05, keep)
[Reduction] Contextual Bandit Exploration with ADF (rnd) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --epsilon arg                           Minimum exploration probability (type: float, default: 0, keep)
    --rnd arg                               Rnd based exploration (type: uint, default: 1, keep, necessary)
    --rnd_alpha arg                         CI width for rnd (bigger => more exploration on repeating features)
                                            (type: float, default: 0.1, keep)
    --rnd_invlambda arg                     Covariance regularization strength rnd (bigger => more exploration
                                            on new features) (type: float, default: 0.1, keep)
[Reduction] Contextual Bandit Exploration with ADF (softmax) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --epsilon arg                           Epsilon-greedy exploration (type: float, default: 0, keep)
    --softmax                               Softmax exploration (type: bool, keep, necessary)
    --lambda arg                            Parameter for softmax (type: float, default: 1, keep)
[Reduction] Contextual Bandit Exploration with ADF (synthetic cover) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --epsilon arg                           Epsilon-greedy exploration (type: float, default: 0, keep)
    --synthcover                            Use synthetic cover exploration (type: bool, keep, necessary)
    --synthcoverpsi arg                     Exploration reward bonus (type: float, default: 0.1, keep)
    --synthcoversize arg                    Number of policies in cover (type: uint, default: 100, keep)
[Reduction] Contextual Bandit Exploration with ADF (tau-first) Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --first arg                             Tau-first exploration (type: uint, keep, necessary)
    --epsilon arg                           Epsilon-greedy exploration (type: float, default: 0, keep)
[Reduction] Contextual Bandit Options:
    --cb arg                                Use contextual bandit learning with <k> costs (type: uint, keep,
                                            necessary)
    --cb_type arg                           Contextual bandit method to use (type: str, default: dr, choices
                                            {dm, dr, ips, mtr, sm}, keep)
    --eval                                  Evaluate a policy rather than optimizing (type: bool)
    --cb_force_legacy                       Default to non-adf cb implementation (cb_to_cb_adf) (type: bool,
                                            keep)
[Reduction] Contextual Bandit with Action Dependent Features Options:
    --cb_adf                                Do Contextual Bandit learning with multiline action dependent
                                            features (type: bool, keep, necessary)
    --rank_all                              Return actions sorted by score order (type: bool, keep)
    --no_predict                            Do not do a prediction when training (type: bool)
    --clip_p arg                            Clipping probability in importance weight. Default: 0.f (no clipping)
                                            (type: float, default: 0, keep)
    --cb_type arg                           Contextual bandit method to use (type: str, default: mtr, choices
                                            {dm, dr, ips, mtr, sm}, keep)
[Reduction] Contextual Bandit: cb -> cb_adf Options:
    --cb_to_cbadf arg                       Flag is unused and has no effect. It should not be passed. The
                                            cb_to_cbadf reduction is automatically enabled if cb, cb_explore
                                            or cbify are used. This flag will be removed in a future release
                                            but not the functionality. (type: uint)
    --cb arg                                Maps cb_adf to cb. Disable with cb_force_legacy (type: uint,
                                            keep)
    --cb_explore arg                        Translate cb explore to cb_explore_adf. Disable with cb_force_legacy
                                            (type: uint, keep)
    --cbify arg                             Translate cbify to cb_adf. Disable with cb_force_legacy (type:
                                            uint, keep)
    --cb_force_legacy                       Default to non-adf cb implementation (cb_algs) (type: bool, keep)
[Reduction] Continuous Action Contextual Bandit using Zeroth-Order Optimization Options:
    --cbzo                                  Solve 1-slot Continuous Action Contextual Bandit using Zeroth-Order
                                            Optimization (type: bool, keep, necessary)
    --policy arg                            Policy/Model to Learn (type: str, default: linear, choices {constant,
                                            linear}, keep)
    --radius arg                            Exploration Radius (type: float, default: 0.1, keep)
[Reduction] Continuous Action Tree with Smoothing with Full Pdf Options:
    --cats_pdf arg                          Number of tree labels <k> for cats_pdf (type: int, keep, necessary)
[Reduction] Continuous Actions Tree with Smoothing Options:
    --cats arg                              Number of discrete actions <k> for cats (type: uint, keep, necessary)
    --min_value arg                         Minimum continuous value (type: float, keep)
    --max_value arg                         Maximum continuous value (type: float, keep)
    --bandwidth arg                         Bandwidth (radius) of randomization around discrete actions in
                                            terms of continuous range. By default will be set to half of
                                            the continuous action unit-range resulting in smoothing that
                                            stays inside the action space unit-range:
                                            unit_range = (max_value
                                            - min_value)/num-of-actions
                                            default bandwidth = unit_range /
                                            2.0 (type: float, keep)
[Reduction] Continuous Actions: Convert to Pmf Options:
    --get_pmf                               Convert a single multiclass prediction to a pmf (type: bool,
                                            keep, necessary)
[Reduction] Continuous Actions: Sample Pdf Options:
    --sample_pdf                            Sample a pdf and pick a continuous valued action (type: bool,
                                            keep, necessary)
[Reduction] Continuous Actions: cb_explore_pdf Options:
    --cb_explore_pdf                        Sample a pdf and pick a continuous valued action (type: bool,
                                            keep, necessary)
    --epsilon arg                           Epsilon-greedy exploration (type: float, default: 0.05, keep)
    --min_value arg                         Min value for continuous range (type: float, default: 0, keep)
    --max_value arg                         Max value for continuous range (type: float, default: 1, keep)
    --first_only                            Use user provided first action or user provided pdf or uniform
                                            random (type: bool, keep)
[Reduction] Convert Discrete PMF into Continuous PDF Options:
    --pmf_to_pdf arg                        Number of discrete actions <k> for pmf_to_pdf (type: uint, default:
                                            0, keep, necessary)
    --min_value arg                         Minimum continuous value (type: float, keep)
    --max_value arg                         Maximum continuous value (type: float, keep)
    --bandwidth arg                         Bandwidth (radius) of randomization around discrete actions in
                                            terms of continuous range. By default will be set to half of
                                            the continuous action unit-range resulting in smoothing that
                                            stays inside the action space unit-range:
                                            unit_range = (max_value
                                            - min_value)/num-of-actions
                                            default bandwidth = unit_range /
                                            2.0 (type: float, keep)
    --first_only                            Use user provided first action or user provided pdf or uniform
                                            random (type: bool, keep)
[Reduction] Cost Sensitive Active Learning Options:
    --cs_active arg                         Cost-sensitive active learning with <k> costs (type: uint, keep,
                                            necessary)
    --simulation                            Cost-sensitive active learning simulation mode (type: bool)
    --baseline                              Cost-sensitive active learning baseline (type: bool)
    --domination arg                        Cost-sensitive active learning use domination (type: int, default:
                                            1)
    --mellowness arg                        Mellowness parameter c_0 (type: float, default: 0.1, keep)
    --range_c arg                           Parameter controlling the threshold for per-label cost uncertainty
                                            (type: float, default: 0.5)
    --max_labels arg                        Maximum number of label queries (type: uint, default: 18446744073709551615)
    --min_labels arg                        Minimum number of label queries (type: uint, default: 18446744073709551615)
    --cost_max arg                          Cost upper bound (type: float, default: 1)
    --cost_min arg                          Cost lower bound (type: float, default: 0)
    --csa_debug                             Print debug stuff for cs_active (type: bool)
[Reduction] Cost Sensitive One Against All Options:
    --csoaa arg                             One-against-all multiclass with <k> costs (type: uint, keep,
                                            necessary)
    --indexing arg                          Choose between 0 or 1-indexing (type: uint, choices {0, 1}, keep)
[Reduction] Cost Sensitive One Against All with Label Dependent Features Options:
    --csoaa_ldf arg                         Use one-against-all multiclass learning with label dependent
                                            features (type: str, choices {m, mc, multiline, multiline-classifier},
                                            keep, necessary)
    --ldf_override arg                      Override singleline or multiline from csoaa_ldf or wap_ldf, eg
                                            if stored in file (type: str)
    --csoaa_rank                            Return actions sorted by score order (type: bool, keep)
    --probabilities                         Predict probabilities of all classes (type: bool, keep)
[Reduction] Cost Sensitive Weighted All-Pairs with Label Dependent Features Options:
    --wap_ldf arg                           Use weighted all-pairs multiclass learning with label dependent
                                            features. Specify singleline or multiline. (type: str, choices
                                            {m, mc, multiline, multiline-classifier}, keep, necessary)
[Reduction] Count label Options:
    --dont_output_best_constant             Don't track the best constant used in the output (type: bool)
[Reduction] Debug Metrics Options:
    --extra_metrics arg                     Specify filename to write metrics to. Note: There is no fixed
                                            schema (type: str, necessary)
[Reduction] Epsilon-Decaying Exploration Options:
    --epsilon_decay                         Use decay of exploration reduction (type: bool, keep, necessary,
                                            experimental)
    --model_count arg                       Set number of exploration models (type: uint, default: 3, keep,
                                            experimental)
    --min_scope arg                         Minimum example count of model before removing (type: uint, default:
                                            100, keep, experimental)
    --epsilon_decay_significance_level arg  Set significance level for champion change (type: float, default:
                                            0.05, keep, experimental)
    --epsilon_decay_estimator_decay arg     Time constant for count decay (type: float, default: 1, keep,
                                            experimental)
    --epsilon_decay_audit arg               Epsilon decay audit file name (type: str, experimental)
    --constant_epsilon                      Keep epsilon constant across models (type: bool, keep, experimental)
    --fixed_significance_level              Use fixed significance level as opposed to scaling by model count
                                            (bonferroni correction) (type: bool, keep, experimental)
    --min_champ_examples arg                Minimum number of examples for any challenger to become champion
                                            (type: uint, default: 0, keep, experimental)
    --initial_epsilon arg                   Initial epsilon value (type: float, default: 1, keep, experimental)
    --shift_model_bounds arg                Shift maximum update_count for model i from champ_update_count^(i
                                            / num_models) to champ_update_count^((i + shift) / (num_models
                                            + shift)) (type: uint, default: 0, keep, experimental)
[Reduction] Error Correcting Tournament Options:
    --ect arg                               Error correcting tournament with <k> labels (type: uint, keep,
                                            necessary)
    --error arg                             Errors allowed by ECT (type: uint, default: 0, keep)
    --link arg                              Specify the link function (type: str, default: identity, choices
                                            {glf1, identity, logistic, poisson}, keep)
[Reduction] Experience Replay / replay_b Options:
    --replay_b arg                          Use experience replay at a specified level [b=classification/regression,
                                            m=multiclass, c=cost sensitive] with specified buffer size (type:
                                            uint, keep, necessary)
    --replay_b_count arg                    How many times (in expectation) should each example be played
                                            (default: 1 = permuting) (type: uint, default: 1)
[Reduction] Experience Replay / replay_c Options:
    --replay_c arg                          Use experience replay at a specified level [b=classification/regression,
                                            m=multiclass, c=cost sensitive] with specified buffer size (type:
                                            uint, keep, necessary)
    --replay_c_count arg                    How many times (in expectation) should each example be played
                                            (default: 1 = permuting) (type: uint, default: 1)
[Reduction] Experience Replay / replay_m Options:
    --replay_m arg                          Use experience replay at a specified level [b=classification/regression,
                                            m=multiclass, c=cost sensitive] with specified buffer size (type:
                                            uint, keep, necessary)
    --replay_m_count arg                    How many times (in expectation) should each example be played
                                            (default: 1 = permuting) (type: uint, default: 1)
[Reduction] Experimental: Contextual Bandit Exploration with ADF with large action space filtering Options:
    --cb_explore_adf                        Online explore-exploit for a contextual bandit problem with multiline
                                            action dependent features (type: bool, keep, necessary)
    --large_action_space                    Large action space filtering (type: bool, keep, necessary, experimental)
    --max_actions arg                       Max number of actions to hold (type: uint, default: 20, keep,
                                            experimental)
    --spanner_c arg                         Parameter for computing c-approximate spanner (type: float, default:
                                            2, keep, experimental)
    --thread_pool_size arg                  Number of threads in the thread pool that will be used when running
                                            with one pass svd implementation (default svd implementation
                                            option). Default thread pool size will be half of the available
                                            hardware threads (type: uint)
    --block_size arg                        Number of actions in a block to be scheduled for multithreading
                                            when using one pass svd implementation (by default, block_size
                                            = num_actions / thread_pool_size) (type: uint, default: 0)
    --las_hint_explicit_simd                Use explicit simd implementation in one pass svd. Only works
                                            with quadratics and no ignores. (x86 Linux only) (type: bool,
                                            experimental)
    --two_pass_svd                          A more accurate svd that is much slower than the default (one
                                            pass svd) (type: bool, experimental)
[Reduction] Explore Evaluation Options:
    --explore_eval                          Evaluate explore_eval adf policies (type: bool, keep, necessary)
    --multiplier arg                        Multiplier used to make all rejection sample probabilities <=
                                            1 (type: float)
    --target_rate arg                       The target rate will be used to adjust the rejection rate in
                                            order to achieve an update count of #examples * target_rate (type:
                                            float)
[Reduction] Follow the Regularized Leader - Coin Options:
    --coin                                  Coin betting optimizer (type: bool, keep, necessary)
    --ftrl_alpha arg                        Learning rate for FTRL optimization (type: float)
    --ftrl_beta arg                         Learning rate for FTRL optimization (type: float)
[Reduction] Follow the Regularized Leader - FTRL Options:
    --ftrl                                  FTRL: Follow the Proximal Regularized Leader (type: bool, keep,
                                            necessary)
    --ftrl_alpha arg                        Learning rate for FTRL optimization (type: float)
    --ftrl_beta arg                         Learning rate for FTRL optimization (type: float)
[Reduction] Follow the Regularized Leader - Pistol Options:
    --pistol                                PiSTOL: Parameter-free STOchastic Learning (type: bool, keep,
                                            necessary)
    --ftrl_alpha arg                        Learning rate for FTRL optimization (type: float)
    --ftrl_beta arg                         Learning rate for FTRL optimization (type: float)
[Reduction] FreeGrad Options:
    --freegrad                              Diagonal FreeGrad Algorithm (type: bool, keep, necessary)
    --restart                               Use the FreeRange restarts (type: bool)
    --project                               Project the outputs to adapt to both the lipschitz and comparator
                                            norm (type: bool)
    --radius arg                            Radius of the l2-ball for the projection. If not supplied, an
                                            adaptive radius will be used (type: float)
    --fepsilon arg                          Initial wealth (type: float, default: 1)
    --flipschitz_const arg                  Upper bound on the norm of the gradients if known in advance
                                            (type: float, default: 0)
[Reduction] Generate Interactions Options:
    --leave_duplicate_interactions          Don't remove interactions with duplicate combinations of namespaces.
                                            For ex. this is a duplicate: '-q ab -q ba' and a lot more in
                                            '-q ::'. (type: bool)
[Reduction] Gradient Descent Matrix Factorization Options:
    --rank arg                              Rank for matrix factorization (type: uint, keep, necessary)
[Reduction] Gradient Descent Options:
    --sgd                                   Use regular stochastic gradient descent update (type: bool, keep)
    --adaptive                              Use adaptive, individual learning rates (type: bool, keep)
    --adax                                  Use adaptive learning rates with x^2 instead of g^2x^2 (type:
                                            bool)
    --invariant                             Use safe/importance aware updates (type: bool, keep)
    --normalized                            Use per feature normalized updates (type: bool, keep)
    --sparse_l2 arg                         Degree of l2 regularization applied to activated sparse parameters
                                            (type: float, default: 0)
    --l1_state arg                          Amount of accumulated implicit l1 regularization (type: float,
                                            default: 0)
    --l2_state arg                          Amount of accumulated implicit l2 regularization (type: float,
                                            default: 1)
[Reduction] Interact via Elementwise Multiplication Options:
    --interact arg                          Put weights on feature products from namespaces <n1> and <n2>
                                            (type: str, keep, necessary)
[Reduction] Interaction Grounded Learning Options:
    --experimental_igl                      Do Interaction Grounding with multiline action dependent features
                                            (type: bool, keep, necessary, experimental)
[Reduction] Kernel SVM Options:
    --ksvm                                  Kernel svm (type: bool, keep, necessary)
    --reprocess arg                         Number of reprocess steps for LASVM (type: uint, default: 1)
    --pool_greedy                           Use greedy selection on mini pools (type: bool)
    --para_active                           Do parallel active learning (type: bool)
    --pool_size arg                         Size of pools for active learning (type: uint, default: 1)
    --subsample arg                         Number of items to subsample from the pool (type: uint, default:
                                            1)
    --kernel arg                            Type of kernel (type: str, default: linear, choices {linear,
                                            poly, rbf}, keep)
    --bandwidth arg                         Bandwidth of rbf kernel (type: float, default: 1, keep)
    --degree arg                            Degree of poly kernel (type: int, default: 2, keep)
[Reduction] LBFGS and Conjugate Gradient Options:
    --bfgs                                  Use conjugate gradient based optimization (type: bool, keep,
                                            necessary)
    --hessian_on                            Use second derivative in line search (type: bool)
    --mem arg                               Memory in bfgs (type: int, default: 15)
    --termination arg                       Termination threshold (type: float, default: 0.001)
[Reduction] Latent Dirichlet Allocation Options:
    --lda arg                               Run lda with <int> topics (type: uint, keep, necessary)
    --lda_alpha arg                         Prior on sparsity of per-document topic weights (type: float,
                                            default: 0.1, keep)
    --lda_rho arg                           Prior on sparsity of topic distributions (type: float, default:
                                            0.1, keep)
    --lda_D arg                             Number of documents (type: float, default: 10000)
    --lda_epsilon arg                       Loop convergence threshold (type: float, default: 0.001)
    --minibatch arg                         Minibatch size, for LDA (type: uint, default: 1)
    --math-mode arg                         Math mode: 0=simd, 1=accuracy, 2=fast-approx (type: int, default:
                                            0, choices {0, 1, 2})
    --metrics                               Compute metrics (type: bool)
[Reduction] Logarithmic Time Multiclass Tree Options:
    --log_multi arg                         Use online tree for multiclass (type: uint, keep, necessary)
    --no_progress                           Disable progressive validation (type: bool)
    --swap_resistance arg                   Higher = more resistance to swap, default=4 (type: uint, default:
                                            4)
[Reduction] Low Rank Quadratics FA Options:
    --lrqfa arg                             Use low rank quadratic features with field aware weights (type:
                                            str, keep, necessary)
[Reduction] Low Rank Quadratics Options:
    --lrq args...                           Use low rank quadratic features (type: list[str], keep, necessary)
    --lrqdropout                            Use dropout training for low rank quadratic features (type: bool,
                                            keep)
[Reduction] Make csoaa_ldf into Contextual Bandit Options:
    --cbify_ldf                             Convert csoaa_ldf into a contextual bandit problem (type: bool,
                                            keep, necessary)
    --loss0 arg                             Loss for correct label (type: float, default: 0)
    --loss1 arg                             Loss for incorrect label (type: float, default: 1)
[Reduction] Marginal Options:
    --marginal arg                          Substitute marginal label estimates for ids (type: str, keep,
                                            necessary)
    --initial_denominator arg               Initial denominator (type: float, default: 1)
    --initial_numerator arg                 Initial numerator (type: float, default: 0.5)
    --compete                               Enable competition with marginal features (type: bool)
    --update_before_learn                   Update marginal values before learning (type: bool)
    --unweighted_marginals                  Ignore importance weights when computing marginals (type: bool)
    --decay arg                             Decay multiplier per event (1e-3 for example) (type: float, default:
                                            0)
[Reduction] Matrix Factorization Reduction Options:
    --new_mf arg                            Rank for reduction-based matrix factorization (type: uint, keep,
                                            necessary)
[Reduction] Memory Tree Options:
    --memory_tree arg                       Make a memory tree with at most <n> nodes (type: uint, default:
                                            0, keep, necessary)
    --max_number_of_labels arg              Max number of unique label (type: uint, default: 10)
    --leaf_example_multiplier arg           Multiplier on examples per leaf (default = log nodes) (type:
                                            uint, default: 1)
    --alpha arg                             Alpha (type: float, default: 0.1)
    --dream_repeats arg                     Number of dream operations per example (default = 1) (type: uint,
                                            default: 1)
    --top_K arg                             Top K prediction error (type: int, default: 1)
    --learn_at_leaf                         Enable learning at leaf (type: bool)
    --oas                                   Use oas at the leaf (type: bool)
    --dream_at_update arg                   Turn on dream operations at reward based update as well (type:
                                            int, default: 0)
    --online                                Turn on dream operations at reward based update as well (type:
                                            bool)
[Reduction] Multilabel One Against All Options:
    --multilabel_oaa arg                    One-against-all multilabel with <k> labels (type: uint, keep,
                                            necessary)
    --probabilities                         Predict probabilities of all classes (type: bool)
    --link arg                              Specify the link function (type: str, default: identity, choices
                                            {glf1, identity, logistic, poisson}, keep)
[Reduction] Multiworld Testing Options:
    --multiworld_test arg                   Evaluate features as a policies (type: str, keep, necessary)
    --learn arg                             Do Contextual Bandit learning on <n> classes (type: uint)
    --exclude_eval                          Discard mwt policy features before learning (type: bool)
[Reduction] Network sending Options:
    --sendto arg                            Send examples to <host> (type: str, keep, necessary)
[Reduction] Neural Network Options:
    --nn arg                                Sigmoidal feedforward network with <k> hidden units (type: uint,
                                            keep, necessary)
    --inpass                                Train or test sigmoidal feedforward network with input passthrough
                                            (type: bool, keep)
    --multitask                             Share hidden layer across all reduced tasks (type: bool, keep)
    --dropout                               Train or test sigmoidal feedforward network using dropout (type:
                                            bool, keep)
    --meanfield                             Train or test sigmoidal feedforward network using mean field
                                            (type: bool)
[Reduction] Noop Base Learner Options:
    --noop                                  Do no learning (type: bool, keep, necessary)
[Reduction] Offset Tree Options:
    --ot arg                                Offset tree with <k> labels (type: uint, keep, necessary)
[Reduction] OjaNewton Options:
    --OjaNewton                             Online Newton with Oja's Sketch (type: bool, keep, necessary)
    --sketch_size arg                       Size of sketch (type: int, default: 10)
    --epoch_size arg                        Size of epoch (type: int, default: 1)
    --alpha arg                             Mutiplicative constant for indentiy (type: float, default: 1)
    --alpha_inverse arg                     One over alpha, similar to learning rate (type: float)
    --learning_rate_cnt arg                 Constant for the learning rate 1/t (type: float, default: 2)
    --normalize arg                         Normalize the features or not (type: str)
    --random_init arg                       Randomize initialization of Oja or not (type: str)
[Reduction] One Against All Options:
    --oaa arg                               One-against-all multiclass with <k> labels (type: uint, keep,
                                            necessary)
    --oaa_subsample arg                     Subsample this number of negative examples when learning (type:
                                            uint)
    --probabilities                         Predict probabilities of all classes (type: bool)
    --scores                                Output raw scores per class (type: bool)
    --indexing arg                          Choose between 0 or 1-indexing (type: uint, choices {0, 1}, keep)
[Reduction] Print Psuedolearner Options:
    --print                                 Print examples (type: bool, keep, necessary)
[Reduction] Probabilistic Label Tree Options:
    --plt arg                               Probabilistic Label Tree with <k> labels (type: uint, keep, necessary)
    --kary_tree arg                         Use <k>-ary tree (type: uint, default: 2, keep)
    --threshold arg                         Predict labels with conditional marginal probability greater
                                            than <thr> threshold (type: float, default: 0.5)
    --top_k arg                             Predict top-<k> labels instead of labels above threshold (type:
                                            uint, default: 0)
[Reduction] Recall Tree Options:
    --recall_tree arg                       Use online tree for multiclass (type: uint, keep, necessary)
    --max_candidates arg                    Maximum number of labels per leaf in the tree (type: uint, keep)
    --bern_hyper arg                        Recall tree depth penalty (type: float, default: 1)
    --max_depth arg                         Maximum depth of the tree, default log_2 (#classes) (type: uint,
                                            keep)
    --node_only                             Only use node features, not full path features (type: bool, keep)
    --randomized_routing                    Randomized routing (type: bool, keep)
[Reduction] Scorer Options:
    --link arg                              Specify the link function (type: str, default: identity, choices
                                            {glf1, identity, logistic, poisson}, keep)
[Reduction] Search Options:
    --search arg                            Use learning to search, argument=maximum action id or 0 for LDF
                                            (type: uint, default: 1, keep)
    --search_task arg                       The search task (use "--search_task list" to get a list of available
                                            tasks) (type: str, choices {argmax, dep_parser, entity_relation,
                                            graph, hook, list, multiclasstask, sequence, sequence_ctg, sequence_demoldf,
                                            sequencespan}, keep, necessary)
    --search_metatask arg                   The search metatask (use "--search_metatask list" to get a list
                                            of available metatasks Note: a valid search_task needs to be
                                            supplied in addition for this to output.) (type: str, keep)
    --search_interpolation arg              At what level should interpolation happen? (type: str, choices
                                            {data, policy}, keep)
    --search_rollout arg                    How should rollouts be executed (type: str, choices {learn, mix,
                                            mix_per_roll, mix_per_state, none, oracle, policy, ref})
    --search_rollin arg                     How should past trajectories be generated (type: str, choices
                                            {learn, mix, mix_per_roll, mix_per_state, oracle, policy, ref})
    --search_passes_per_policy arg          Number of passes per policy (only valid for search_interpolation=policy)
                                            (type: uint, default: 1)
    --search_beta arg                       Interpolation rate for policies (only valid for search_interpolation=policy)
                                            (type: float, default: 0.5)
    --search_alpha arg                      Annealed beta = 1-(1-alpha)^t (only valid for search_interpolation=data)
                                            (type: float, default: 1e-10)
    --search_total_nb_policies arg          If we are going to train the policies through multiple separate
                                            calls to vw, we need to specify this parameter and tell vw how
                                            many policies are eventually going to be trained (type: uint)
    --search_trained_nb_policies arg        The number of trained policies in a file (type: uint)
    --search_allowed_transitions arg        Read file of allowed transitions [def: all transitions are allowed]
                                            (type: str)
    --search_subsample_time arg             Instead of training at all timesteps, use a subset. if value
                                            in (0,1), train on a random v%. if v>=1, train on precisely v
                                            steps per example, if v<=-1, use active learning (type: float)
    --search_neighbor_features arg          Copy features from neighboring lines. argument looks like: '-1:a,+2'
                                            meaning copy previous line namespace a and next next line from
                                            namespace _unnamed_, where ',' separates them (type: str, keep)
    --search_rollout_num_steps arg          How many calls of "loss" before we stop really predicting on
                                            rollouts and switch to oracle (default means "infinite") (type:
                                            uint, default: 0)
    --search_history_length arg             Some tasks allow you to specify how much history their depend
                                            on; specify that here (type: uint, default: 1, keep)
    --search_no_caching                     Turn off the built-in caching ability (makes things slower, but
                                            technically more safe) (type: bool)
    --search_xv                             Train two separate policies, alternating prediction/learning
                                            (type: bool)
    --search_perturb_oracle arg             Perturb the oracle on rollin with this probability (type: float,
                                            default: 0)
    --search_linear_ordering                Insist on generating examples in linear order (def: hoopla permutation)
                                            (type: bool)
    --search_active_verify arg              Verify that active learning is doing the right thing (arg = multiplier,
                                            should be = cost_range * range_c) (type: float)
    --search_save_every_k_runs arg          Save model every k runs (type: uint, default: 0)
[Reduction] Slates Options:
    --slates                                Enable slates reduction (type: bool, keep, necessary)
[Reduction] Stagewise Polynomial Options:
    --stage_poly                            Use stagewise polynomial feature learning (type: bool, keep,
                                            necessary)
    --sched_exponent arg                    Exponent controlling quantity of included features (type: float,
                                            default: 1)
    --batch_sz arg                          Multiplier on batch size before including more features (type:
                                            uint, default: 1000)
    --batch_sz_no_doubling                  Batch_sz does not double (type: bool)
[Reduction] Stochastic Variance Reduced Gradient Options:
    --svrg                                  Streaming Stochastic Variance Reduced Gradient (type: bool, keep,
                                            necessary)
    --stage_size arg                        Number of passes per SVRG stage (type: int, default: 1)
[Reduction] Top K Options:
    --top arg                               Top k recommendation (type: uint, keep, necessary)
[Reduction] Warm start contextual bandit Options:
    --warm_cb arg                           Convert multiclass on <k> classes into a contextual bandit problem
                                            (type: uint, keep, necessary)
    --warm_cb_cs                            Consume cost-sensitive classification examples instead of multiclass
                                            (type: bool)
    --loss0 arg                             Loss for correct label (type: float, default: 0)
    --loss1 arg                             Loss for incorrect label (type: float, default: 1)
    --warm_start arg                        Number of training examples for warm start phase (type: uint,
                                            default: 0)
    --epsilon arg                           Epsilon-greedy exploration (type: float, keep)
    --interaction arg                       Number of examples for the interactive contextual bandit learning
                                            phase (type: uint, default: 4294967295)
    --warm_start_update                     Indicator of warm start updates (type: bool)
    --interaction_update                    Indicator of interaction updates (type: bool)
    --corrupt_type_warm_start arg           Type of label corruption in the warm start phase (1: uniformly
                                            at random, 2: circular, 3: replacing with overwriting label)
                                            (type: int, default: 1, choices {1, 2, 3})
    --corrupt_prob_warm_start arg           Probability of label corruption in the warm start phase (type:
                                            float, default: 0)
    --choices_lambda arg                    The number of candidate lambdas to aggregate (lambda is the importance
                                            weight parameter between the two sources) (type: uint, default:
                                            1)
    --lambda_scheme arg                     The scheme for generating candidate lambda set (1: center lambda=0.5,
                                            2: center lambda=0.5, min lambda=0, max lambda=1, 3: center lambda=epsilon/(1+epsilon),
                                            4: center lambda=epsilon/(1+epsilon), min lambda=0, max lambda=1);
                                            the rest of candidate lambda values are generated using a doubling
                                            scheme (type: int, default: 1, choices {1, 2, 3, 4})
    --overwrite_label arg                   The label used by type 3 corruptions (overwriting) (type: uint,
                                            default: 1)
    --sim_bandit                            Simulate contextual bandit updates on warm start examples (type:
                                            bool)
