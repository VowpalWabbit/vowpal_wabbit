name: Linux / Python

on:
  push:
    branches:
      - master
      - 'releases/**'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    container:
      image: vowpalwabbit/manylinux2010-build:latest
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.config.experimental }}
    strategy:
      matrix:
        config:
        - { version: "3.6", base_path: /opt/python/cp36-cp36m/, include_dir_name: python3.6m/, experimental: false }
        - { version: "3.7", base_path: /opt/python/cp37-cp37m/, include_dir_name: python3.7m/, experimental: false }
        - { version: "3.8", base_path: /opt/python/cp38-cp38/, include_dir_name: python3.8/, experimental: false }
        - { version: "3.9", base_path: /opt/python/cp39-cp39/, include_dir_name: python3.9/, experimental: false }
        - { version: "3.10", base_path: /opt/python/cp310-cp310/, include_dir_name: python3.10/, experimental: false }
    steps:
      # v1 must be used because newer versions require a node.js version that will not run on this old image.
      - uses: actions/checkout@v1
      - name: Build wheel
        shell: bash
        run: |
          ${{ matrix.config.base_path }}bin/pip wheel . -w wheel_output/ --global-option --cmake-options="-DSTATIC_LINK_VW_JAVA=On;-DPython_INCLUDE_DIR='${{ matrix.config.base_path }}include/${{ matrix.config.include_dir_name }}'" --verbose
          auditwheel repair wheel_output/*whl -w audit_output/
      - name: Upload built wheel
        uses: actions/upload-artifact@v1
        with:
          name: wheel_${{ matrix.config.version }}
          path: audit_output/
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
        - { python_version: "3.6", artifact_version: "3.6" }
        - { python_version: "3.7", artifact_version: "3.7" }
        - { python_version: "3.8", artifact_version: "3.8" }
        - { python_version: "3.9", artifact_version: "3.9" }
        - { python_version: "3.10", artifact_version: "3.10" }
        - { python_version: "pypy-3.7", artifact_version: "3.7" }
        - { python_version: "pypy-3.8", artifact_version: "3.8" }
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python_version }}
          architecture: x64
      - name: Download Wheel
        uses: actions/download-artifact@v1
        with:
          name: wheel_${{ matrix.config.artifact_version }}
      - name: Install dependencies
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install pytest twine
      - name: Install wheel
        shell: bash
        run: |
          export wheel_files=(wheel_${{ matrix.config.version }}/*)
          export wheel_file="${wheel_files[0]}"
          echo Installing ${wheel_file}...
          pip install ${wheel_file}
      - name: Run twine check
        shell: bash
        run: |
          export wheel_files=(wheel_${{ matrix.config.version }}/*)
          export wheel_file="${wheel_files[0]}"
          twine check ${wheel_file}
      - name: Run unit tests
        shell: bash
        run: |
          python -m pytest ./python/tests/
      - name: Run doctest
        shell: bash
        run: |
          python ./python/tests/run_doctest.py
      - name: Run vw tests as Python module
        shell: bash
        # Onethread is not supported in the Python wrapper so those tests must be skipped
        # Stdin is not supported
        # Help output tests assume --onthread is in the output
        # Fail tests are not included because the python stack trace causes the output to differ
        # Daemon tests are skipped
        # Tests without datafiles are skipped
        run: |
          cd test
          python run_tests.py -E 0.001 -f --skip_spanning_tree_tests --vw_bin_path "python3 -m vowpalwabbit" --skip_test 60 61 92 96 149 152 177 193 194 195 220 275 276 324 325 326 349 350 356 357 358 385 389 390 391 392 393
  make_source_dist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Install dependencies
        shell: bash
        run: python setup.py sdist
      - name: Upload built wheel
        uses: actions/upload-artifact@v2
        with:
          name: python_source_distribution
          path: dist/*.tar.gz
  build_source_dist:
    needs: make_source_dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Download Wheel
        uses: actions/download-artifact@v1
        with:
          name: python_source_distribution
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt update
          sudo apt install libboost-dev libboost-program-options-dev libboost-system-dev libboost-math-dev libboost-thread-dev libboost-test-dev libboost-python-dev zlib1g-dev cmake g++
      - name: Install source dist
        shell: bash
        run: |
          export src_files=(python_source_distribution/*)
          export src_file="${src_files[0]}"
          echo Installing ${src_file}...
          pip install ${src_file}
      - uses: actions/checkout@v2
      - name: Install dependencies
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install pytest
      - name: Run unit tests
        shell: bash
        run: |
          python -m pytest ./python/tests/
