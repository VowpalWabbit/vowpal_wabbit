name: Build Nugets

on:
  push:
    branches:
      - master
      - 'releases/**'
      - 'dev/DotNet**'
  pull_request:
    branches:
      - '*'

concurrency: 
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  build_nuget_windows:
    name: nuget.${{ matrix.toolset }}.${{ matrix.arch_config.arch }}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: ["windows-2019"]
        toolset: ["v141", "v142"]
        arch_config:
        - { arch: x64, generator_arch: x64}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Configure
        run: >
          cmake -S . -B build
          -G "Visual Studio 16 2019" -A ${{ matrix.arch_config.generator_arch }}
          -T ${{ matrix.toolset }}
          -DNATIVE_NUGET_PLATFORM_TAG="${{ matrix.arch_config.arch }}"
          -DBUILD_FLATBUFFERS=Off
          -DBUILD_TESTING=Off
          -DRAPIDJSON_SYS_DEP=Off
          -DFMT_SYS_DEP=Off
          -DSPDLOG_SYS_DEP=Off
          -DVW_ZLIB_SYS_DEP=Off
          -DVW_BOOST_MATH_SYS_DEP=Off
          -DVW_BUILD_VW_C_WRAPPER=Off
          -DVW_INSTALL=On
      - name: Build and install
        run: |
          cmake --build build --config Debug -t vw_io vw_core vw_cli_bin vw_allreduce vw_spanning_tree_bin vw_c_wrapper
          cmake --build build --config Release -t vw_io vw_core vw_cli_bin vw_allreduce vw_spanning_tree_bin vw_c_wrapper

          # Install debug first so that release overwrites the exe and nothing else
          cmake --install build --prefix ./nuget_staging --config Debug
          cmake --install build --prefix ./nuget_staging --config Release
      - if: ${{ matrix.arch_config.arch == 'x64' }}
        run: cp nuget\native\vowpalwabbit-x64.targets nuget_staging\vowpalwabbit.targets
      - name: Package
        shell: powershell
        id: generate-nuget
        run: |
          cp build\nuget\native\vowpalwabbit.nuspec nuget_staging\vowpalwabbit.nuspec
          cd nuget_staging
          nuget pack .\vowpalwabbit.nuspec
          $NugetFileName = Get-ChildItem *.nupkg -name
          echo "::set-output name=NugetFileName::$NugetFileName"
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.generate-nuget.outputs.NugetFileName }}
          path: nuget_staging/${{ steps.generate-nuget.outputs.NugetFileName }}

  test_nuget_windows:
    needs: [build_nuget_windows]
    name: nuget-test.${{ matrix.toolset }}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: ["windows-2019"]
        toolset: ["v141", "v142"]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: ilammy/msvc-dev-cmd@v1
      - id: fetch-vw-version
        run: |
          $version = Get-Content version.txt -Raw
          $version = $version.Trim()
          echo "::set-output name=VWVersion::$version"
      - uses: actions/download-artifact@v1
        with:
          name: VowpalWabbitNative-${{matrix.toolset}}-x64.${{ steps.fetch-vw-version.outputs.VWVersion }}.nupkg
          path: downloaded_nugets
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Test nuget
        run: |
          ls downloaded_nugets
          nuget install -Source ${{ github.workspace }}\downloaded_nugets -OutputDirectory ${{ github.workspace }}\nuget\native\test\packages\ VowpalWabbitNative-${{ matrix.toolset }}-x64
          cd nuget\native\test

          echo "Testing debug build..."
          msbuild test-${{ matrix.toolset }}.vcxproj -t:rebuild "-property:Configuration=Debug;Platform=x64"
          .\bin\x64\Debug\test-${{ matrix.toolset }}.exe

          echo "Testing release build..."
          msbuild test-${{ matrix.toolset }}.vcxproj -t:rebuild "-property:Configuration=Release;Platform=x64"
          .\bin\x64\Release\test-${{ matrix.toolset }}.exe

  build_nuget_dotnet:
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macos-latest"]
    runs-on: ${{matrix.os}}
    steps:
      # Setup for build
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Setup MSVC Developer Command Prompt
        if: ${{ startsWith(matrix.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Install dotnet t4
        run: dotnet tool install --global dotnet-t4

      # Build .NET Core, all platforms
      - name: Configure .NET Core
        run: >
          cmake -S . -B build -G Ninja
          -Dvw_BUILD_NET_CORE=On
          -Dvw_DOTNET_USE_MSPROJECT=Off
          -DBUILD_FLATBUFFERS=Off
          -DRAPIDJSON_SYS_DEP=Off
          -DFMT_SYS_DEP=Off
          -DSPDLOG_SYS_DEP=Off
          -DVW_ZLIB_SYS_DEP=Off
          -DVW_BOOST_MATH_SYS_DEP=Off
          -DVW_BUILD_VW_C_WRAPPER=Off
          -DBUILD_TESTING=Off
          -DBUILD_SHARED_LIBS=Off
      - name: Build .NET Core
        run: cmake --build build --config Release
      - name: Install .NET Core
        run: cmake --install build --prefix ./nuget_staging

      # Build .NET Framework on Windows
      - name: Reset build directory
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: Remove-Item -Recurse -Force .\build
      - name: Configure .NET Framework
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: >
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64
          -Dvw_BUILD_NET_FRAMEWORK=On
          -DBUILD_FLATBUFFERS=Off
          -DRAPIDJSON_SYS_DEP=Off
          -DFMT_SYS_DEP=Off
          -DSPDLOG_SYS_DEP=Off
          -DVW_ZLIB_SYS_DEP=Off
          -DVW_BOOST_MATH_SYS_DEP=Off
          -DVW_BUILD_VW_C_WRAPPER=Off
          -DBUILD_TESTING=Off
          -DBUILD_SHARED_LIBS=Off
      - name: Build .NET Framework
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: cmake --build build --config Release
      - name: Install .NET Framework
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: cmake --install build --prefix ./nuget_staging

      # Create the combined package on Windows
      - name: Package Combined
        if: ${{ startsWith(matrix.os, 'windows') }}
        shell: powershell
        id: generate-nuget
        run: |
          cd nuget_staging
          nuget pack dotnet.nuspec
          $NugetFileName = Get-ChildItem *.nupkg -name
          echo "::set-output name=NugetFileName::$NugetFileName"
      - name: Upload Combined
        if: ${{ startsWith(matrix.os, 'windows') }}
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.generate-nuget.outputs.NugetFileName }}
          path: nuget_staging/${{ steps.generate-nuget.outputs.NugetFileName }}

      # Create the .NET Core runtime package, all platforms
      - name: Package .NET Core Runtime
        shell: bash
        id: generate-runtime-nuget
        run: |
          cd nuget_staging
          nuget pack dotnetcore_runtime.nuspec
          NugetFileName=(*runtime*.nupkg)
          echo "::set-output name=NugetFileName::${NugetFileName[0]}"
      - name: Upload .NET Core Runtime
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.generate-runtime-nuget.outputs.NugetFileName }}
          path: nuget_staging/${{ steps.generate-runtime-nuget.outputs.NugetFileName }}

  test_nuget_dotnetcore:
    needs: [build_nuget_dotnet]
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "windows-latest", runtime_id: "win-x64" }
          - { os: "ubuntu-latest", runtime_id: "linux-x64" }
          - { os: "macos-latest", runtime_id: "osx-x64" }
        package_name: ["VowpalWabbit"]
    runs-on: ${{matrix.config.os}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - if: ${{ startsWith(matrix.config.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: Get version of VW
        id: fetch-vw-version
        shell: bash
        run: |
          version=$(cat version.txt)
          echo "::set-output name=VWVersion::$version"

      # Download the previously built Nuget packages
      - name: Clear nuget cache
        run: dotnet nuget locals all --clear
      - uses: actions/download-artifact@v1
        with:
          name: ${{matrix.package_name}}.${{steps.fetch-vw-version.outputs.VWVersion}}.nupkg
          path: downloaded_nugets
      - uses: actions/download-artifact@v1
        with:
          name: ${{matrix.package_name}}.runtime.${{matrix.config.runtime_id}}.${{steps.fetch-vw-version.outputs.VWVersion}}.nupkg
          path: downloaded_nugets
      - name: List downloaded packages
        run: ls downloaded_nugets

        # Some of these commands may generate an error message because we are installing packages from local source with remote dependencies
        # The missing dependencies are installed in later steps
      - name: Install package
        run: |
          set +e
          cd nuget/dotnet/test
          dotnet add dotnetcore_nuget_test.csproj package ${{matrix.package_name}} --version ${{steps.fetch-vw-version.outputs.VWVersion}} --source "${{github.workspace}}/downloaded_nugets" --no-restore
          dotnet restore dotnetcore_nuget_test.csproj --runtime ${{matrix.config.runtime_id}} --source "${{github.workspace}}/downloaded_nugets"
          dotnet restore dotnetcore_nuget_test.csproj --runtime ${{matrix.config.runtime_id}}
          exit 0
      - name: Build and run test
        run: |
          cd nuget/dotnet/test
          dotnet build dotnetcore_nuget_test.csproj --runtime ${{matrix.config.runtime_id}} --output build --no-restore --self-contained
          ./build/dotnetcore_nuget_test

  test_nuget_dotnetframework:
    needs: [build_nuget_dotnet]
    strategy:
      fail-fast: false
      matrix:
        package_name: ["VowpalWabbit"]
    runs-on: "windows-latest"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - if: ${{ startsWith(matrix.config.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: Get version of VW
        id: fetch-vw-version
        shell: bash
        run: |
          version=$(cat version.txt)
          echo "::set-output name=VWVersion::$version"

      # Download the previously built Nuget packages
      - name: Clear nuget cache
        run: dotnet nuget locals all --clear
      - uses: actions/download-artifact@v1
        with:
          name: ${{matrix.package_name}}.${{steps.fetch-vw-version.outputs.VWVersion}}.nupkg
          path: downloaded_nugets
      - uses: actions/download-artifact@v1
        with:
          name: ${{matrix.package_name}}.runtime.win-x64.${{steps.fetch-vw-version.outputs.VWVersion}}.nupkg
          path: downloaded_nugets
      - name: List downloaded packages
        run: ls downloaded_nugets

        # Some of these commands may generate an error message because we are installing packages from local source with remote dependencies
        # The missing dependencies are installed in later steps
      - name: Install package
        run: |
          set +e
          cd nuget/dotnet/test
          dotnet add dotnetframework_nuget_test.csproj package ${{matrix.package_name}} --version ${{steps.fetch-vw-version.outputs.VWVersion}} --source "${{github.workspace}}/downloaded_nugets" --no-restore
          dotnet restore dotnetframework_nuget_test.csproj --runtime win-x64 --source "${{github.workspace}}/downloaded_nugets"
          dotnet restore dotnetframework_nuget_test.csproj --runtime win-x64
          exit 0
      - name: Build and run test
        run: |
          cd nuget/dotnet/test
          dotnet build dotnetframework_nuget_test.csproj --runtime win-x64 --output build --no-restore --self-contained
          ./build/dotnetframework_nuget_test

  benchmark_nuget:
    needs: [build_nuget_dotnet]
    strategy:
      fail-fast: false
      matrix:
        package_name: ["VowpalWabbit"]
    runs-on: "windows-latest"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - if: ${{ startsWith(matrix.config.os, 'windows') }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: Get version of VW
        id: fetch-vw-version
        shell: bash
        run: |
          version=$(cat version.txt)
          echo "::set-output name=VWVersion::$version"

      # Download the previously built Nuget packages
      - name: Clear nuget cache
        run: dotnet nuget locals all --clear
      - uses: actions/download-artifact@v1
        with:
          name: ${{matrix.package_name}}.${{steps.fetch-vw-version.outputs.VWVersion}}.nupkg
          path: downloaded_nugets
      - uses: actions/download-artifact@v1
        with:
          name: ${{matrix.package_name}}.runtime.win-x64.${{steps.fetch-vw-version.outputs.VWVersion}}.nupkg
          path: downloaded_nugets
      - name: List downloaded packages
        run: ls downloaded_nugets

        # Some of these commands may generate an error message because we are installing packages from local source with remote dependencies
        # The missing dependencies are installed in later steps
      - name: Install package
        run: |
          set +e
          cd nuget/dotnet/benchmarks
          dotnet add dotnet_benchmark.csproj package ${{matrix.package_name}} --version ${{steps.fetch-vw-version.outputs.VWVersion}} --source "${{github.workspace}}/downloaded_nugets" --no-restore
          dotnet restore dotnet_benchmark.csproj --runtime win-x64 --source "${{github.workspace}}/downloaded_nugets"
          dotnet restore dotnet_benchmark.csproj --runtime win-x64
          exit 0
      - name: Build and run benchmarks
        run: |
          cd nuget/dotnet/benchmarks

          # Build for both .NET Core and Framework
          dotnet build dotnet_benchmark.csproj --framework net6.0 --runtime win-x64 --configuration Release --no-restore --self-contained
          dotnet build dotnet_benchmark.csproj --framework net4.8 --runtime win-x64 --configuration Release --no-restore --self-contained

          # Run with .NET Core as host process
          # Arguments after "--" are for BenchmarkDotNet
          dotnet run dotnet_benchmark.csproj--framework net6.0 --runtime win-x64 --configuration Release --no-build -- --filter '*' --runtimes net6.0 net4.8
      - name: Print benchmark results
        shell: bash
        run: |
          cd nuget/dotnet/benchmarks/BenchmarkDotNet.Artifacts/results
          for file in *-report-github.md; do
              benchmark="${file%-report-github.md}"
              echo "***** $benchmark *****"

              # Remove lines not part of table (not between |...|)
              # Remove markdown formatting **
              # Remove first 3 columns of table
              cat "$file" | sed '/^|.*|\s*$/!d' | sed 's/\*\*//g' | sed 's/^\(|[^|]*\)\{3\}//'

              echo ""
          done
