{
	"Add scaffold reduction header": {
		"scope": "cpp",
		"prefix": "reduction_header",
		"body": [
			"// Copyright (c) by respective owners including Yahoo!, Microsoft, and",
			"// individual contributors. All rights reserved. Released under a BSD (revised)",
			"// license as described in the file LICENSE.",
			"",
			"#pragma once",
			"",
			"#include \"reductions_fwd.h\"",
			"",
			"namespace VW",
			"{",
			"namespace reductions",
			"{",
			"VW::LEARNER::base_learner* ${1:name}_setup(VW::setup_base_i& stack_builder);",
			"}  // namespace VW",
			"}  // namespace reductions",
		],
		"description": "Reduction header scaffold"
	},
	"Add scaffold reduction implementation (singleline)": {
		"scope": "cpp",
		"prefix": "reduction_impl_single",
		"body": [
			"// Copyright (c) by respective owners including Yahoo!, Microsoft, and",
			"// individual contributors. All rights reserved. Released under a BSD (revised)",
			"// license as described in the file LICENSE.",
			"",
			"#include \"reduction.h\"",
			"",
			"#include \"example.h\"",
			"#include \"global_data.h\"",
			"#include \"learner.h\"",
			"#include \"memory.h\"",
			"#include \"options.h\"",
			"#include \"vw.h\"",
			"#include \"label_type.h\"",
			"#include \"prediction_type.h\"",
			"",
			"#include <string>",
			"",
			"namespace",
			"{",
			"struct reduction_data",
			"{",
			"};",
			"",
			"void predict(reduction_data& data, VW::LEARNER::single_learner& base, example& ec) {}",
			"",
			"void learn(reduction_data& data, VW::LEARNER::single_learner& base, example& ec) {}",
			"",
			"void finish_example(VW::workspace& all, reduction_data& data, example& ec) { VW::finish_example(all, ec); }",
			"} // namespace",
			"",
			"VW::LEARNER::base_learner* VW::reductions::reduction_setup(VW::setup_base_i& stack_builder)",
			"{",
			"  VW::config::options_i& options = *stack_builder.get_options();",
			"  std::string arg;",
			"",
			"  VW::config::option_group_definition reduction_options(\"Reduction options\");",
			"  reduction_options.add(VW::config::make_option(\"reduction\", arg).keep().necessary().help(\"\"));",
			"  if (!options.add_parse_and_check_necessary(reduction_options)) { return nullptr; }",
			"",
			"  auto data = VW::make_unique<reduction_data>();",
			"  auto* base = VW::LEARNER::as_singleline(stack_builder.setup_base_learner());",
			"  auto* learner = VW::LEARNER::make_reduction_learner(",
			"      std::move(data), base, learn, predict, stack_builder.get_setupfn_name(reduction_setup))",
<<<<<<< HEAD
			"                      .set_output_prediction_type(VW::prediction_type_t::SCALAR)",
			"                      .set_input_label_type(VW::label_type_t::simple)",
=======
			"                      .set_output_prediction_type(VW::prediction_type_t::scalar)",
			"                      .set_input_label_type(VW::label_type_t::SIMPLE)",
>>>>>>> upstream/master
			"                      .set_finish_example(finish_example)",
			"                      .build();",
			"",
			"  return VW::LEARNER::make_base(*learner);",
			"}",
		],
		"description": "Reduction implementation (singleline)"
	},
	"Add scaffold reduction implementation (multiline)": {
		"scope": "cpp",
		"prefix": "reduction_impl_multi",
		"body": [
			"// Copyright (c) by respective owners including Yahoo!, Microsoft, and",
			"// individual contributors. All rights reserved. Released under a BSD (revised)",
			"// license as described in the file LICENSE.",
			"",
			"#include \"reduction.h\"",
			"",
			"#include \"example.h\"",
			"#include \"global_data.h\"",
			"#include \"learner.h\"",
			"#include \"memory.h\"",
			"#include \"options.h\"",
			"#include \"vw.h\"",
			"",
			"#include <string>",
			"",
			"namespace",
			"{",
			"struct reduction_data",
			"{",
			"};",
			"",
			"void predict(reduction_data& data, VW::LEARNER::multi_learner& base, multi_ex& ec_seq) {}",
			"",
			"void learn(reduction_data& data, VW::LEARNER::multi_learner& base, multi_ex& ec_seq) {}",
			"",
			"void finish_example(VW::workspace& all, reduction_data& data, multi_ex& ec) { VW::finish_example(all, ec); }",
			"} // namespace",
			"",
			"VW::LEARNER::base_learner* VW::reductions::reduction_setup(VW::setup_base_i& stack_builder)",
			"{",
			"  VW::config::options_i& options = *stack_builder.get_options();",
			"  std::string arg;",
			"",
			"  VW::config::option_group_definition reduction_options(\"Reduction options\");",
			"  reduction_options.add(VW::config::make_option(\"reduction\", arg).keep().necessary().help(\"\"));",
			"  if (!options.add_parse_and_check_necessary(reduction_options)) { return nullptr; }",
			"",
			"  auto data = VW::make_unique<reduction_data>();",
			"  auto* base = VW::LEARNER::as_multiline(stack_builder.setup_base_learner());",
			"  auto* learner = VW::LEARNER::make_reduction_learner(",
			"      std::move(data), base, learn, predict, stack_builder.get_setupfn_name(reduction_setup))",
<<<<<<< HEAD
			"                      .set_output_prediction_type(prediction_type_t::SCALAR)",
			"                      .set_input_label_type(label_type_t::simple)",
=======
			"                      .set_output_prediction_type(prediction_type_t::scalar)",
			"                      .set_input_label_type(label_type_t::SIMPLE)",
>>>>>>> upstream/master
			"                      .set_finish_example(finish_example)",
			"                      .build();",
			"",
			"  return VW::LEARNER::make_base(*learner);",
			"}",
		],
		"description": "Reduction implementation (multiline)"
	}
}
